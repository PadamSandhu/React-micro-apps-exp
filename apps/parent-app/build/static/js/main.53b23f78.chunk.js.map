{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","divHtml","useEffect","$","ajax","url","dataType","success","data","console","log","doc","DOMParser","parseFromString","scripts","getElementsByTagName","forEach","incomingScript","script","document","createElement","URL","src","pathname","async","body","appendChild","className","logo","alt","href","target","rel","id","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,yPCoG5BC,MA5Ff,WAAgB,IAAD,EACiBC,mBAAS,+CAD1B,mBACNC,EADM,KAsDb,OAtDa,KAEbC,qBAAU,WAoBRC,IAAEC,KAAK,CACLC,IAAK,UACLC,SAAU,OACVC,QAAS,SAACC,GACRC,QAAQC,IAAIF,GACZ,IAAOG,GAAM,IAAIC,WAAYC,gBAAgBL,EAAM,aAC7CM,EAAU,YAAIH,EAAII,qBAAqB,WAAWC,SAAS,SAAAC,GAC/D,IAAMC,EAASC,SAASC,cAAc,UAChCf,EAAM,IAAIgB,IAAIJ,EAAeK,KACnCb,QAAQC,IAAIL,EAAIkB,UAChBL,EAAOI,IAAM,yBAAyBjB,EAAIkB,SAC1CL,EAAOM,OAAQ,EACfL,SAASM,KAAKC,YAAYR,MAG5BT,QAAQC,IAAII,QAef,IAGD,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKL,IAAKM,IAAMD,UAAU,WAAWE,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEF,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBAuBF,yBAAKC,GAAG,kBAAR,UACA,yBAAKC,wBAAyB,CAACC,OAAQlC,KACvC,yBAAKgC,GAAG,gBACR,yBAAKA,GAAG,aCnFMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.53b23f78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport $ from 'jquery';\nimport ReactDOMServer from 'react-dom/server';\nimport HtmlToReactParser from 'html-to-react';\nimport './App.css';\n\n\nfunction App() {\n  const [divHtml, setDivHtml] = useState('<div id=\"page-1-section\">Padam Hello </div>');\n  useEffect(() => {\n    // setTimeout(() => {\n    //   $(\"#page-1\").load(\"/page-1\");\n    // }, 2000);\n    // $.get('/page-1', function(data) {\n    //   console.log(data);\n    //   // $('#page-1-section').html(data);\n    // });\n    \n\n    // fetch('/page-1', {\n    //   headers: {\n    //     'Access-Control-Allow-Origin': '*'\n    //   }\n    // }).then((data)=> {\n    //   console.log(data);\n    // });\n    // console.log('I worked');\n\n    // $('#page-1').load('http://localhost:5000 #counter-app > *');\n    $.ajax({\n      url: \"/page-1\",\n      dataType: \"html\",\n      success: (data)=> {\n        console.log(data)\n        const  doc = new DOMParser().parseFromString(data, 'text/html');\n        const scripts = [...doc.getElementsByTagName('script')].forEach( incomingScript => {\n          const script = document.createElement('script');\n          const url = new URL(incomingScript.src)\n          console.log(url.pathname)\n          script.src = 'http://localhost:3002/'+url.pathname;\n          script.async = true;\n          document.body.appendChild(script);\n        })\n\n        console.log(scripts);\n      }\n    })\n\n\n    // const script = document.createElement('script');\n    // console.log(\"script\",script);\n    // script.src = \"http://localhost:5000/static/js/react-counter.js\";\n    // script.async = true;\n  \n    // document.body.appendChild(script);\n  \n    // return () => {\n    //   document.body.removeChild(script);\n    // }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        {/* <embed\n          src=\"http://localhost:3002/\"\n          width=\"200\"\n          height=\"200\"\n          onerror=\"alert('URL invalid !!');\"\n        />\n        <object\n          data=\"http://localhost:3002/\"\n          width=\"400\"\n          height=\"300\"\n          type=\"text/html\"\n        >\n          Alternative Content\n        </object> */}\n      </header>\n      <div id=\"page-1-section\" >Hello </div>\n      <div dangerouslySetInnerHTML={{__html: divHtml}} ></div>\n      <div id=\"counter-app\"></div>\n      <div id=\"page-1\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}